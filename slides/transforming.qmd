---
title: Transforming
lang: en
subtitle: Prompt Engineering 5
author: Jan Kirenz
execute:
  eval: true
  echo: true
highlight-style: github
format:
  revealjs: 
    toc: true
    toc-depth: 1
    embed-resources: false
    theme: [dark, ../custom.scss]  
    incremental: false
    transition: slide
    background-transition: fade
    transition-speed: slow
    code-copy: true
    code-line-numbers: true
    smaller: false
    scrollable: true
    slide-number: c
    preview-links: auto
    chalkboard: 
      buttons: false
   #logo: images/logo.png
    footer: Jan Kirenz
---

# Setup

## API key and Python libaries

```{python}

from redlines import Redlines
from IPython.display import display, Markdown, Latex, HTML, JSON
import openai
import os

from dotenv import load_dotenv, find_dotenv
_ = load_dotenv(find_dotenv())  # read local .env file

openai.api_key = os.getenv('OPENAI_API_KEY')
```

## Helper function

```{python}


def get_completion(prompt, model="gpt-3.5-turbo", temperature=0):
    messages = [{"role": "user", "content": prompt}]
    response = openai.ChatCompletion.create(
        model=model,
        messages=messages,
        temperature=temperature,
    )
    return response.choices[0].message["content"]


```

# Translation

- ChatGPT is trained with sources in many languages
- This gives the model the ability to do translation


## Example 1

```{python}
# | output-location: fragment

prompt = f"""
Translate the following English text to Spanish: \ 
```Hi, I would like to order a blender```
"""
response = get_completion(prompt)
print(response)
```


## Example 2

```{python}
# | output-location: fragment

prompt = f"""
Tell me which language this is: 
```Combien coûte le lampadaire?```
"""
response = get_completion(prompt)
print(response)
```

## Example 3

```{python}
# | output-location: fragment

prompt = f"""
Translate the following  text to French and Spanish
and English pirate: \
```I want to order a basketball```
"""
response = get_completion(prompt)
print(response)
```

## Example 4

```{python}
# | output-location: fragment

prompt = f"""
Translate the following text to Spanish in both the \
formal and informal forms: 
'Would you like to order a pillow?'
"""
response = get_completion(prompt)
print(response)
```

# Universal Translator

## Context

- Imagine you are in charge of IT at a large multinational e-commerce company
- Users are messaging you with IT issues in all their native languages
- Your staff is from all over the world and speaks only their native languages
- You need a universal translator!

## User messages

```{python}

user_messages = [
    "La performance du système est plus lente que d'habitude.",
    "Mi monitor tiene píxeles que no se iluminan.",
    "Il mio mouse non funziona",
    "Mój klawisz Ctrl jest zepsuty",
    "我的屏幕在闪烁"
]
```

## Translations

```{python}
# | output-location: slide

for issue in user_messages:
    prompt = f"Tell me what language this is: ```{issue}```"
    lang = get_completion(prompt)
    print(f"Original message ({lang}): {issue}")

    prompt = f"""
    Translate the following  text to English \
    and German: ```{issue}```
    """
    response = get_completion(prompt)
    print(response, "\n")
```


## User messages with English translation

- System performance is slower than normal: "La performance du système est plus lente que d'habitude.",
- My monitor has pixels that are not lighting: "Mi monitor tiene píxeles que no se iluminan.",
- My mouse is not working: "Il mio mouse non funziona",
- My keyboard has a broken control key: "Mój klawisz Ctrl jest zepsuty",
- My screen is flashing: ‚"我的屏幕在闪烁"  

# Tone Transformation

## From slang to business tone

- Writing can vary based on the intended audience. 
- ChatGPT can produce different tones.

```{python}
# | output-location: slide

prompt = f"""
Translate the following from slang to a business letter: 
'Dude, This is Joe, check out this spec on this standing lamp.'
"""
response = get_completion(prompt)
print(response)
```

# Format Conversion

- ChatGPT can translate between formats. 
- The prompt should describe the input and output formats.

## From dictionary to HTML 

```{python}
# | output-location: slide

data_json = {"restaurant employees": [
    {"name": "Shyam", "email": "shyamjaiswal@gmail.com"},
    {"name": "Bob", "email": "bob32@gmail.com"},
    {"name": "Jai", "email": "jai87@gmail.com"}
]}

prompt = f"""
Translate the following python dictionary from JSON to an HTML \
table with column headers and title: {data_json}
"""
response = get_completion(prompt)
print(response)
```

## HTML output


```{python}
# | output-location: slide

display(HTML(response))
```

# Spellcheck & Grammar check

- To signal to the LLM that you want it to proofread your text, you instruct the model to 'proofread' or 'proofread and correct'

## Multiple text examples

- Text examples are taken from [Writing Prompts](https://writingprompts.com/bad-grammar-examples/)


```{python}
text = [
    "The girl with the black and white puppies have a ball.",
    "Yolanda has her notebook.",
    "Its going to be a long day. Does the car need it’s oil changed?",
    "Their goes my freedom. There going to bring they’re suitcases.",
    "Your going to need you’re notebook.",
    "That medicine effects my ability to sleep. Have you heard of the butterfly affect?",
    "This phrase is to cherck chatGPT for speling abilitty"
]

```

## Proofreading

```{python}
# | output-location: slide

prompt = f"""Proofread and correct the following text and rewrite the corrected version. If you don't find and errors, just say "No errors found". Don't use  any punctuation around the text:
    ```{t}```"""
response = get_completion(prompt)
print(response)
```

## Review about a toy  {.smaller}

```{python}
# | output-location: slide

text = f"""
Got this for my daughter for her birthday cuz she keeps taking \
mine from my room.  Yes, adults also like pandas too.  She takes \
it everywhere with her, and it's super soft and cute.  One of the \
ears is a bit lower than the other, and I don't think that was \
designed to be asymmetrical. It's a bit small for what I paid for it \
though. I think there might be other options that are bigger for \
the same price.  It arrived a day earlier than expected, so I got \
to play with it myself before I gave it to my daughter.
"""
```

## Proofreading


```{python}
# | output-location: slide

prompt = f"proofread and correct this review: ```{text}```"
response = get_completion(prompt)
print(response)
```

## Display differences


```{python}
# | output-location: slide

diff = Redlines(text, response)
display(Markdown(diff.output_markdown))
```


## Make it more compelling


```{python}
# | output-location: slide

prompt = f"""
proofread and correct this review. Make it more compelling. 
Ensure it follows APA style guide and targets an advanced reader. 
Output in markdown format.
Text: ```{text}```
"""
response = get_completion(prompt)
display(Markdown(response))
```

## Show differences

```{python}
# | output-location: slide
diff2 = Redlines(text, response)
display(Markdown(diff2.output_markdown))
```
