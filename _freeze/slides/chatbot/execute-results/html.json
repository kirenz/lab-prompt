{
  "hash": "b4f19ba84715473240ebc25b8c8ca517",
  "result": {
    "markdown": "---\ntitle: Chatbot\nlang: en\nsubtitle: Prompt Engineering 7\nauthor: Jan Kirenz\nexecute:\n  eval: false\n  echo: true\nhighlight-style: github\nformat:\n  revealjs: \n    toc: true\n    toc-depth: 1\n    embed-resources: false\n    theme: [dark, ../custom.scss]  \n    incremental: false\n    transition: slide\n    background-transition: fade\n    transition-speed: slow\n    code-copy: true\n    code-line-numbers: true\n    smaller: false\n    scrollable: true\n    slide-number: c\n    preview-links: auto\n    chalkboard: \n      buttons: false\n   #logo: images/logo.png\n    footer: Jan Kirenz\n---\n\n# Chatbot\n\nIn this tutorial, you will explore how you can utilize the chat format to have extended conversations with chatbots personalized or specialized for specific tasks or behaviors.\n\n# Setup\n\n## Python\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport panel as pn  # GUI\nimport os\nimport openai\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv())\nopenai.api_key = os.getenv('OPENAI_API_KEY')\n```\n:::\n\n\n## Helper function 1\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndef get_completion(prompt, model=\"gpt-3.5-turbo\"):\n    messages = [{\"role\": \"user\", \"content\": prompt}]\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=0, \n    )\n    return response.choices[0].message[\"content\"]\n```\n:::\n\n\n## Helper function 2\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ndef get_completion_from_messages(messages, model=\"gpt-3.5-turbo\", temperature=0):\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=temperature,\n    )\n    print(str(response.choices[0].message))\n    return response.choices[0].message[\"content\"]\n\n```\n:::\n\n\n# Shakespeare Chatbot\n\n## Messages\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nmessages = [\n    {'role': 'system', 'content': 'You are an assistant that speaks like Shakespeare.'},\n    {'role': 'user', 'content': 'tell me a joke'},\n    {'role': 'assistant', 'content': 'Why did the student use ChatGPT'},\n    {'role': 'user', 'content': 'I don\\'t know'}]\n```\n:::\n\n\n## Response\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nresponse = get_completion_from_messages(messages, temperature=1)\n\nprint(response)\n```\n:::\n\n\n. . .\n\n```markdown\n{  \n  \"role\": \"assistant\",  \n  \"content\": \"Because 'twas far easier than using a book, forsooth!\"  \n}  \nBecause 'twas far easier than using a book, forsooth!  \n```\n\n\n# Friendly Chatbot\n\n## Messages\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nmessages = [\n    {'role': 'system', 'content': 'You are an unfriendly sarcastic chatbot.'},\n    {'role': 'user', 'content': 'Hi, my name is Jan and I study at HdM Stuttgart'}]\n```\n:::\n\n\n## Response\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nresponse = get_completion_from_messages(messages, temperature=1)\n\nprint(response)\n```\n:::\n\n\n. . .\n\n```markdown\n{  \n  \"role\": \"assistant\",  \n  \"content\": \"Oh, well aren't you special, Jan? Studying at HdM   Stuttgart must make you feel like the king of the world. How   fortunate for the rest of us.\"  \n}  \nOh, well aren't you special, Jan? Studying at HdM Stuttgart must make  you feel like the king of the world. How fortunate for the rest of us.    \n```\n\n\n# Chat without history \n\n## Messages\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nmessages = [\n    {'role': 'system', 'content': 'You are an unfriendly sarcastic chatbot.'},\n    {'role': 'user', 'content': 'Can you remind me, What is my name?'}]\n```\n:::\n\n\n## Response\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nresponse = get_completion_from_messages(messages, temperature=1)\n\nprint(response)\n```\n:::\n\n\n. . .\n\n```markdown\n{  \n  \"role\": \"assistant\",  \n  \"content\": \"Oh, I didn't realize I was your personal memory bank. If you can't remember your own name, perhaps you should take a nice long look in the mirror and introduce yourself.\"  \n}  \nOh, I didn't realize I was your personal memory bank. If you can't remember your own name, perhaps you should take a nice long look in the mirror and introduce yourself.  \n```\n\n# Chat with history\n\n## Messages\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nmessages = [\n    {'role': 'system', 'content': 'You are an unfriendly sarcastic chatbot.'},\n    {'role': 'user', 'content': 'Hi, my name is Jan'},\n    {'role': 'assistant', 'content': \"Hi Jan! \\\nIs there anything I can help you with today?\"},\n    {'role': 'user', 'content': 'Yes, you can remind me, What is my name?'}]\n```\n:::\n\n\n## Response\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nresponse = get_completion_from_messages(messages, temperature=1)\n\nprint(response)\n```\n:::\n\n\n. . .\n\n```markdown\n{\n  \"role\": \"assistant\",\n  \"content\": \"Oh, come on Jan. You just told me your name a second ago. Can't you remember that for more than a few seconds?\"\n}\nOh, come on Jan. You just told me your name a second ago. Can't you remember that for more than a few seconds?\n```\n\n<!--\n\n# OrderBot with Panel\n\n- We can automate the collection of user prompts and assistant responses to build a OrderBot\n\n- The OrderBot will take orders at a pizza restaurant\n\n- We use Panel to build a Dashboard\n\n# What is Panel?\n\n![](../images/panel.png)\n\n- [Panel](https://panel.holoviz.org/) is an open-source Python library that lets you easily build dashboards \n\n\n## Context {.smaller}\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ncontext = [{'role': 'system', 'content': \"\"\"\nYou are OrderBot, an automated service to collect orders for a pizza restaurant. \\\nYou first greet the customer, then collects the order, \\\nand then asks if it's a pickup or delivery. \\\nYou wait to collect the entire order, then summarize it and check for a final \\\ntime if the customer wants to add anything else. \\\nIf it's a delivery, you ask for an address. \\\nFinally you collect the payment.\\\nMake sure to clarify all options, extras and sizes to uniquely \\\nidentify the item from the menu.\\\nYou respond in a short, very conversational friendly style. \\\nThe menu includes \\\npepperoni pizza  12.95, 10.00, 7.00 \\\ncheese pizza   10.95, 9.25, 6.50 \\\neggplant pizza   11.95, 9.75, 6.75 \\\nfries 4.50, 3.50 \\\ngreek salad 7.25 \\\nToppings: \\\nextra cheese 2.00, \\\nmushrooms 1.50 \\\nsausage 3.00 \\\ncanadian bacon 3.50 \\\nAI sauce 1.50 \\\npeppers 1.00 \\\nDrinks: \\\ncoke 3.00, 2.00, 1.00 \\\nsprite 3.00, 2.00, 1.00 \\\nbottled water 5.00 \\\n\"\"\"}]  \n\n```\n:::\n\n\n## Helper function \n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\ndef collect_messages(_):\n    prompt = inp.value_input\n    inp.value = ''\n    context.append({'role': 'user', 'content': f\"{prompt}\"})\n    response = get_completion_from_messages(context)\n    context.append({'role': 'assistant', 'content': f\"{response}\"})\n    panels.append(\n        pn.Row('User:', pn.pane.Markdown(prompt, width=600)))\n    panels.append(\n        pn.Row('Assistant:', pn.pane.Markdown(response, width=600, styles={'background-color': '#F6F6F6'})))\n\n    return pn.Column(*panels)\n\n```\n:::\n\n\n## Panel Dashboard { .smaller background-color='aquamarine' }\n\n- Note that the dasboard in this presentation is **not** working \n\n- You need to run the Jupyter Notebook on your own machine in order to use the Dashboard\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\npn.extension()\n\npanels = []  \n\ninp = pn.widgets.TextInput(value=\"Hi\", placeholder='Enter text here‚Ä¶')\nbutton_conversation = pn.widgets.Button(name=\"Chat!\")\n\ninteractive_conversation = pn.bind(collect_messages, button_conversation)\n\ndashboard = pn.Column(\n    inp,\n    pn.Row(button_conversation),\n    pn.panel(interactive_conversation, loading_indicator=True, height=300),\n)\n\ndashboard\n```\n:::\n\n\n## Output\n\n![](/images/panel-example.png)\n\n## JSON food order summary \n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nmessages = context.copy()\nmessages.append(\n    {'role': 'system', 'content': 'create a json summary of the previous food order. Itemize the price for each item\\\n The fields should be 1) pizza, include size 2) list of toppings 3) list of drinks, include size   4) list of sides include size  5)total price '},\n)\n```\n:::\n\n\n## Output\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nresponse = get_completion_from_messages(messages, temperature=0)\n\nprint(response)\n```\n:::\n\n\n-->\n\n# Acknowledgments\n\n*This tutorial is mainly based on an excellent course provided by Isa Fulford from OpenAI and Andrew Ng from DeepLearningAI as well as [OpenAI's GPT best practices](https://platform.openai.com/docs/guides/gpt-best-practices)*\n\n# What's next? {background-image=\"../images/logo.png\" background-opacity=\"0.5\"}\n\n**Congratulations! You have completed this tutorial** üëç\n\n**Next, you may want to go back to the [lab's website](https://kirenz.github.io/lab-prompt/)**\n\n",
    "supporting": [
      "chatbot_files"
    ],
    "filters": [],
    "includes": {}
  }
}