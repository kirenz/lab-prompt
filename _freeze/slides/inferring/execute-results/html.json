{
  "hash": "dba9a43a357b1998f5edea081708222a",
  "result": {
    "markdown": "---\ntitle: Inferring\nlang: en\nsubtitle: Prompt Engineering 4\nauthor: Jan Kirenz\nexecute:\n  eval: false\n  echo: true\nhighlight-style: github\nformat:\n  revealjs: \n    toc: true\n    toc-depth: 1\n    embed-resources: false\n    theme: [dark, ../custom.scss]  \n    incremental: true\n    transition: slide\n    background-transition: fade\n    transition-speed: slow\n    code-copy: true\n    code-line-numbers: true\n    smaller: false\n    scrollable: true\n    slide-number: c\n    preview-links: auto\n    chalkboard: \n      buttons: false\n   #logo: images/logo.png\n    footer: Jan Kirenz\n---\n\n# Inferring\n\nIn this tutorial, you will infer sentiment and topics from product reviews and news articles.\n\n\n# Setup\n\n## API key and Python libaries\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport openai\nimport os\n\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv())  \n\nopenai.api_key = os.getenv('OPENAI_API_KEY')\n```\n:::\n\n\n## Helper function\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\ndef get_completion(prompt, model=\"gpt-3.5-turbo\"):\n    messages = [{\"role\": \"user\", \"content\": prompt}]\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=0, \n    )\n    return response.choices[0].message[\"content\"]\n\n```\n:::\n\n\n# Product review example {.smaller}\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nlamp_review = \"\"\"\nNeeded a nice lamp for my bedroom, and this one had \\\nadditional storage and not too high of a price point. \\\nGot it fast.  The string to our lamp broke during the \\\ntransit and the company happily sent over a new one. \\\nCame within a few days as well. It was easy to put \\\ntogether.  I had a missing part, so I contacted their \\\nsupport and they very quickly got me the missing piece! \\\nLumina seems to me to be a great company that cares \\\nabout their customers and products!!\n\"\"\"\n```\n:::\n\n\n# Infer sentiment \n\nSentiment analysis is a technique that identifies the polarity (e.g. positive) of a given text. \n\n## Sentiment?\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nprompt = f\"\"\"\nWhat is the sentiment of the following product review, \nwhich is delimited with triple backticks?\n\nReview text: '''{lamp_review}'''\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n```\n:::\n\n\n- Output: The sentiment of the product review is positive.\n\n\n## Positive or negative?\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nprompt = f\"\"\"\nWhat is the sentiment of the following product review, \nwhich is delimited with triple backticks?\n\nGive your answer as a single word, either \"positive\" \\\nor \"negative\".\n\nReview text: '''{lamp_review}'''\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n```\n:::\n\n\n- Output: positive\n\n## Identify types of emotions\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nprompt = f\"\"\"\nIdentify a list of emotions that the writer of the \\\nfollowing review is expressing. Include no more than \\\nfive items in the list. Format your answer as a list of \\\nlower-case words separated by commas.\n\nReview text: '''{lamp_review}'''\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n```\n:::\n\n\n- Output: happy, satisfied, impressed, grateful, pleased\n\n## Identify anger\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nprompt = f\"\"\"\nIs the writer of the following review expressing anger?\\\nThe review is delimited with triple backticks. \\\nGive your answer as either yes or no.\n\nReview text: '''{lamp_review}'''\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n```\n:::\n\n\n- Output: No\n\n## Extract product and company name {.smaller}\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nprompt = f\"\"\"\nIdentify the following items from the review text: \n- Item purchased by reviewer\n- Company that made the item\n\nThe review is delimited with triple backticks. \\\nFormat your response as a JSON object with \\\n\"Item\" and \"Brand\" as the keys. \nIf the information isn't present, use \"unknown\" \\\nas the value.\nMake your response as short as possible.\n  \nReview text: '''{lamp_review}'''\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n```\n:::\n\n\n. . .\n\n```JSON\n{\n  \"Item\": \"lamp\",\n  \"Brand\": \"Lumina\"\n}\n```\n\n\n## Doing multiple tasks at once\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nprompt = f\"\"\"\nIdentify the following items from the review text: \n- Sentiment (positive or negative)\n- Is the reviewer expressing anger? (true or false)\n- Item purchased by reviewer\n- Company that made the item\n\nThe review is delimited with triple backticks. \\\nFormat your response as a JSON object with \\\n\"Sentiment\", \"Anger\", \"Item\" and \"Brand\" as the keys.\nIf the information isn't present, use \"unknown\" \\\nas the value.\nMake your response as short as possible.\nFormat the Anger value as a boolean.\n\nReview text: '''{lamp_review}'''\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n```\n:::\n\n\n## Output\n\n```JSON\n{\n  \"Sentiment\": \"positive\",\n  \"Anger\": false,\n  \"Item\": \"lamp\",\n  \"Brand\": \"Lumina\"\n}\n```\n\n\n# Inferring topics\n\nWe want the model to find topics in a given text\n\n## Example text {.smaller}\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nstory = \"\"\"\nIn a recent survey conducted by the government, \npublic sector employees were asked to rate their level \nof satisfaction with the department they work at. \nThe results revealed that NASA was the most popular \ndepartment with a satisfaction rating of 95%.\n\nOne NASA employee, John Smith, commented on the findings, \nstating, \"I'm not surprised that NASA came out on top. \nIt's a great place to work with amazing people and \nincredible opportunities. I'm proud to be a part of \nsuch an innovative organization.\"\n\nThe results were also welcomed by NASA's management team, \nwith Director Tom Johnson stating, \"We are thrilled to \nhear that our employees are satisfied with their work at NASA. \nWe have a talented and dedicated team who work tirelessly \nto achieve our goals, and it's fantastic to see that their \nhard work is paying off.\"\n\nThe survey also revealed that the \nSocial Security Administration had the lowest satisfaction \nrating, with only 45 percent of employees indicating they were \nsatisfied with their job. The government has pledged to \naddress the concerns raised by employees in the survey and \nwork towards improving job satisfaction across all departments.\n\"\"\"\n```\n:::\n\n\n## Let's infer 5 topics {.smaller}\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nprompt = f\"\"\"\nDetermine five topics that are being discussed in the \\\nfollowing text, which is delimited by triple backticks.\n\nMake each item one or two words long. \n\nProvide your response as a Python list separated by commas.\n\nText sample: '''{story}'''\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n```\n:::\n\n\n. . .\n\n```Python\n['survey', 'satisfaction', 'NASA', 'Social Security Administration', 'job satisfaction']\n```\n\n\n## We create a topic list \n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\ntopic_list = [\n    \"nasa\", \"local government\", \"engineering\",\n    \"employee satisfaction\", \"federal government\"\n]\n```\n:::\n\n\n## Give answer as list with 0 and 1\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nprompt = f\"\"\"\nDetermine whether each item in the following list of \\\ntopics is a topic in the text below, which\nis delimited with triple backticks.\n\nGive your answer as list with 0 or 1 for each topic.\\\n\nList of topics: {\", \".join(topic_list)}\n\nText sample: ```{story}```\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n```\n:::\n\n\n- Output: [1, 0, 0, 1, 1]\n\n\n# Acknowledgments\n\n*This tutorial is mainly based on an excellent course provided by Isa Fulford from OpenAI and Andrew Ng from DeepLearningAI as well as [OpenAI's GPT best practices](https://platform.openai.com/docs/guides/gpt-best-practices)*\n\n# What's next? {background-image=\"../images/logo.png\" background-opacity=\"0.5\"}\n\n**Congratulations! You have completed this tutorial** üëç\n\n**Next, you may want to go back to the [lab's website](https://kirenz.github.io/lab-prompt/)**\n\n",
    "supporting": [
      "inferring_files"
    ],
    "filters": [],
    "includes": {}
  }
}