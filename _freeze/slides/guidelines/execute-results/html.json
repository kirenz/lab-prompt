{
  "hash": "9f6e262c0fbccd784719d7903547c03b",
  "result": {
    "markdown": "---\ntitle: Guidelines\nlang: en\nsubtitle: Prompt Engineering 1\nauthor: Jan Kirenz\nexecute:\n  eval: true\n  echo: true\nhighlight-style: github\nformat:\n  revealjs: \n    toc: true\n    toc-depth: 1\n    embed-resources: false\n    theme: [dark, ../custom.scss]  \n    incremental: true\n    transition: slide\n    background-transition: fade\n    transition-speed: slow\n    code-copy: true\n    code-line-numbers: true\n    smaller: false\n    scrollable: true\n    slide-number: c\n    preview-links: auto\n    chalkboard: \n      buttons: false\n   #logo: images/logo.png\n    footer: Jan Kirenz\n---\n\n# Setup\n\n## API key and Python libaries\n\n::: {#e912a33d .cell execution_count=1}\n``` {.python .cell-code}\nimport openai\nimport os\n\nfrom dotenv import load_dotenv, find_dotenv\n_ = load_dotenv(find_dotenv())\n\nopenai.api_key = os.getenv('OPENAI_API_KEY')\n```\n:::\n\n\n## GPT-3.5 Turbo vs GPT-4\n\n- For cost efficiency reasons, we will use OpenAI's `gpt-3.5-turbo` model and the [chat completions endpoint](https://platform.openai.com/docs/guides/chat). \n\n- However, you can simply replace `model=\"gpt-3.5-turbo\"`with `model=\"gpt-4\"` in the helper function\n\n\n## Helper function {.smaller}\n\n- This helper function will make it easier to use prompts and look at the generated outputs:\n\n. . .\n\n::: {#cdc3d010 .cell execution_count=2}\n``` {.python .cell-code}\ndef get_completion(prompt, model=\"gpt-3.5-turbo\"):\n    messages = [{\"role\": \"user\", \"content\": prompt}]\n    response = openai.ChatCompletion.create(\n        model=model,\n        messages=messages,\n        temperature=0,  # this is the degree of randomness of the model's output\n    )\n    return response.choices[0].message[\"content\"]\n\n```\n:::\n\n\n# Principle 1: Clear and Specific \n\nPrompting Principle 1: Write clear and specific instructions\n\n\n## Tactic 1: delimiters\n\n- Use delimiters to clearly indicate distinct parts of the input\n\n- Delimiters can be anything like: ```, \"\"\", < >, `<tag> </tag>`, `:`\n\n## Tactic 1 example {.smaller .scrollable}\n\n::: {#3d6ddccb .cell output-location='slide' execution_count=3}\n```` {.python .cell-code}\ntext = f\"\"\"\nYou should express what you want a model to do by \\ \nproviding instructions that are as clear and \\ \nspecific as you can possibly make them. \\ \nThis will guide the model towards the desired output, \\ \nand reduce the chances of receiving irrelevant \\ \nor incorrect responses. Don't confuse writing a \\ \nclear prompt with writing a short prompt. \\ \nIn many cases, longer prompts provide more clarity \\ \nand context for the model, which can lead to \\ \nmore detailed and relevant outputs.\n\"\"\"\nprompt = f\"\"\"\nSummarize the text delimited by triple backticks \\ \ninto a single sentence.\n```{text}```\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n````\n\n::: {.cell-output .cell-output-stdout}\n```\nTo guide a model towards the desired output and reduce irrelevant or incorrect responses, it is important to provide clear and specific instructions, which can be achieved through longer prompts that offer more clarity and context.\n```\n:::\n:::\n\n\n## Tactic 2: Structured output {.smaller .scrollable}\n\n- Ask for a structured output\n\n- JSON, HTML\n\n. . .\n\n::: {#b3f11ca4 .cell output-location='slide' execution_count=4}\n``` {.python .cell-code}\nprompt = f\"\"\"\nGenerate a list of three made-up book titles along \\ \nwith their authors and genres. \nProvide them in JSON format with the following keys: \nbook_id, title, author, genre.\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n{\n  \"books\": [\n    {\n      \"book_id\": 1,\n      \"title\": \"The Enigma of Elysium\",\n      \"author\": \"Evelyn Sinclair\",\n      \"genre\": \"Mystery\"\n    },\n    {\n      \"book_id\": 2,\n      \"title\": \"Whispers in the Wind\",\n      \"author\": \"Nathaniel Blackwood\",\n      \"genre\": \"Fantasy\"\n    },\n    {\n      \"book_id\": 3,\n      \"title\": \"Echoes of the Past\",\n      \"author\": \"Amelia Hart\",\n      \"genre\": \"Romance\"\n    }\n  ]\n}\n```\n:::\n:::\n\n\n## Tactic 3: Conditions satisfied 1{.smaller .scrollable}\n\n- Ask the model to check whether conditions are satisfied\n\n::: {#0091805d .cell output-location='slide' execution_count=5}\n``` {.python .cell-code}\ntext_1 = f\"\"\"\nMaking a cup of tea is easy! First, you need to get some \\ \nwater boiling. While that's happening, \\ \ngrab a cup and put a tea bag in it. Once the water is \\ \nhot enough, just pour it over the tea bag. \\ \nLet it sit for a bit so the tea can steep. After a \\ \nfew minutes, take out the tea bag. If you \\ \nlike, you can add some sugar or milk to taste. \\ \nAnd that's it! You've got yourself a delicious \\ \ncup of tea to enjoy.\n\"\"\"\nprompt = f\"\"\"\nYou will be provided with text delimited by triple quotes. \nIf it contains a sequence of instructions, \\ \nre-write those instructions in the following format:\n\nStep 1 - ...\nStep 2 - …\n…\nStep N - …\n\nIf the text does not contain a sequence of instructions, \\ \nthen simply write \\\"No steps provided.\\\"\n\n\\\"\\\"\\\"{text_1}\\\"\\\"\\\"\n\"\"\"\nresponse = get_completion(prompt)\nprint(\"Completion for Text 1:\")\nprint(response)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCompletion for Text 1:\nStep 1 - Get some water boiling.\nStep 2 - Grab a cup and put a tea bag in it.\nStep 3 - Once the water is hot enough, pour it over the tea bag.\nStep 4 - Let it sit for a bit so the tea can steep.\nStep 5 - After a few minutes, take out the tea bag.\nStep 6 - If you like, add some sugar or milk to taste.\nStep 7 - Enjoy your delicious cup of tea.\n```\n:::\n:::\n\n\n## Tactic 3: Conditions satisfied 2 {.smaller .scrollable}\n\n::: {#625afc20 .cell output-location='slide' execution_count=6}\n``` {.python .cell-code}\ntext_2 = f\"\"\"\nThe sun is shining brightly today, and the birds are \\\nsinging. It's a beautiful day to go for a \\ \nwalk in the park. The flowers are blooming, and the \\ \ntrees are swaying gently in the breeze. People \\ \nare out and about, enjoying the lovely weather. \\ \nSome are having picnics, while others are playing \\ \ngames or simply relaxing on the grass. It's a \\ \nperfect day to spend time outdoors and appreciate the \\ \nbeauty of nature.\n\"\"\"\nprompt = f\"\"\"\nYou will be provided with text delimited by triple quotes. \nIf it contains a sequence of instructions, \\ \nre-write those instructions in the following format:\n\nStep 1 - ...\nStep 2 - …\n…\nStep N - …\n\nIf the text does not contain a sequence of instructions, \\ \nthen simply write \\\"No steps provided.\\\"\n\n\\\"\\\"\\\"{text_2}\\\"\\\"\\\"\n\"\"\"\nresponse = get_completion(prompt)\nprint(\"Completion for Text 2:\")\nprint(response)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCompletion for Text 2:\nNo steps provided.\n```\n:::\n:::\n\n\n## Tactic 4: \"Few-shot\" prompting {.smaller .scrollable}\n\n::: {#21164ddf .cell output-location='slide' execution_count=7}\n``` {.python .cell-code}\nprompt = f\"\"\"\nYour task is to answer in a consistent style.\n\n<child>: Teach me about patience.\n\n<grandparent>: The river that carves the deepest \\ \nvalley flows from a modest spring; the \\ \ngrandest symphony originates from a single note; \\ \nthe most intricate tapestry begins with a solitary thread.\n\n<child>: Teach me about resilience.\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<grandparent>: Resilience is like a mighty oak tree that withstands the strongest storms, bending but never breaking. It is the ability to bounce back from adversity, to find strength in the face of challenges, and to persevere even when the odds seem insurmountable. Just as a diamond is formed under immense pressure, resilience is forged through the trials and tribulations of life.\n```\n:::\n:::\n\n\n# Principle 2: Time to think\n\nPrompting Principle 2: Give the model time to “think”\n\n## Tactic 1: Specify steps {.smaller .scrollable}\n\n- Specify the steps required to complete a task\n\n::: {#8dd133d5 .cell output-location='slide' execution_count=8}\n```` {.python .cell-code}\ntext = f\"\"\"\nIn a charming village, siblings Jack and Jill set out on \\ \na quest to fetch water from a hilltop \\ \nwell. As they climbed, singing joyfully, misfortune \\ \nstruck—Jack tripped on a stone and tumbled \\ \ndown the hill, with Jill following suit. \\ \nThough slightly battered, the pair returned home to \\ \ncomforting embraces. Despite the mishap, \\ \ntheir adventurous spirits remained undimmed, and they \\ \ncontinued exploring with delight.\n\"\"\"\n# example 1\nprompt_1 = f\"\"\"\nPerform the following actions: \n1 - Summarize the following text delimited by triple \\\nbackticks with 1 sentence.\n2 - Translate the summary into French.\n3 - List each name in the French summary.\n4 - Output a json object that contains the following \\\nkeys: french_summary, num_names.\n\nSeparate your answers with line breaks.\n\nText:\n```{text}```\n\"\"\"\nresponse = get_completion(prompt_1)\nprint(\"Completion for prompt 1:\")\nprint(response)\n````\n\n::: {.cell-output .cell-output-stdout}\n```\nCompletion for prompt 1:\n1 - Jack and Jill, siblings, go on a quest to fetch water from a hilltop well, but encounter misfortune when Jack trips on a stone and tumbles down the hill, with Jill following suit, yet they return home and remain undeterred in their adventurous spirits.\n\n2 - Jack et Jill, frère et sœur, partent en quête d'eau d'un puits au sommet d'une colline, mais rencontrent un malheur lorsque Jack trébuche sur une pierre et dévale la colline, suivi par Jill, pourtant ils rentrent chez eux et restent déterminés dans leur esprit d'aventure.\n\n3 - Jack, Jill\n\n4 - {\n  \"french_summary\": \"Jack et Jill, frère et sœur, partent en quête d'eau d'un puits au sommet d'une colline, mais rencontrent un malheur lorsque Jack trébuche sur une pierre et dévale la colline, suivi par Jill, pourtant ils rentrent chez eux et restent déterminés dans leur esprit d'aventure.\",\n  \"num_names\": 2\n}\n```\n:::\n:::\n\n\n## Ask for output in a specified format {.smaller .scrollable}\n\n::: {#af0c1a10 .cell output-location='slide' execution_count=9}\n``` {.python .cell-code}\nprompt_2 = f\"\"\"\nYour task is to perform the following actions: \n1 - Summarize the following text delimited by \n  <> with 1 sentence.\n2 - Translate the summary into French.\n3 - List each name in the French summary.\n4 - Output a json object that contains the \n  following keys: french_summary, num_names.\n\nUse the following format:\nText: <text to summarize>\nSummary: <summary>\nTranslation: <summary translation>\nNames: <list of names in Italian summary>\nOutput JSON: <json with summary and num_names>\n\nText: <{text}>\n\"\"\"\nresponse = get_completion(prompt_2)\nprint(\"\\nCompletion for prompt 2:\")\nprint(response)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCompletion for prompt 2:\nSummary: Jack and Jill, siblings, go on a quest to fetch water from a hilltop well but encounter misfortune along the way.\n\nTranslation: Jack et Jill, frère et sœur, partent en quête d'eau d'un puits au sommet d'une colline mais rencontrent des malheurs en chemin.\n\nNames: Jack, Jill\n\nOutput JSON: {\"french_summary\": \"Jack et Jill, frère et sœur, partent en quête d'eau d'un puits au sommet d'une colline mais rencontrent des malheurs en chemin.\", \"num_names\": 2}\n```\n:::\n:::\n\n\n## Tactic 2: Work on own solution 1 {.smaller .scrollable}\n\n- Instruct the model to work out its own solution before rushing to a conclusion\n\n::: {#eb3f151e .cell output-location='slide' execution_count=10}\n``` {.python .cell-code}\nprompt = f\"\"\"\nDetermine if the student's solution is correct or not.\n\nQuestion:\nI'm building a solar power installation and I need \\\n help working out the financials. \n- Land costs $100 / square foot\n- I can buy solar panels for $250 / square foot\n- I negotiated a contract for maintenance that will cost \\ \nme a flat $100k per year, and an additional $10 / square \\\nfoot\nWhat is the total cost for the first year of operations \nas a function of the number of square feet.\n\nStudent's Solution:\nLet x be the size of the installation in square feet.\nCosts:\n1. Land cost: 100x\n2. Solar panel cost: 250x\n3. Maintenance cost: 100,000 + 100x\nTotal cost: 100x + 250x + 100,000 + 100x = 450x + 100,000\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe student's solution is correct. They correctly identified the costs for land, solar panels, and maintenance, and calculated the total cost as a function of the number of square feet.\n```\n:::\n:::\n\n\n## Tactic 2: Work on own solution 2 {.smaller .scrollable}\n\n- Note that the student's solution is actually not correct.\n- We can fix this by instructing the model to work out its own solution first:\n\n::: {#d42ff4bb .cell output-location='slide' execution_count=11}\n``` {.python .cell-code}\nprompt = f\"\"\"\nYour task is to determine if the student's solution \\\nis correct or not.\nTo solve the problem do the following:\n- First, work out your own solution to the problem. \n- Then compare your solution to the student's solution \\ \nand evaluate if the student's solution is correct or not. \nDon't decide if the student's solution is correct until \nyou have done the problem yourself.\n\nUse the following format:\nQuestion:\n'''\nquestion here\n'''\nStudent's solution:\n'''\nstudent's solution here\n'''\nActual solution:\n'''\nsteps to work out the solution and your solution here\n'''\nIs the student's solution the same as actual solution \\\njust calculated:\n'''\nyes or no\n'''\nStudent grade:\n'''\ncorrect or incorrect\n'''\n\nQuestion:\n'''\nI'm building a solar power installation and I need help \\\nworking out the financials. \n- Land costs $100 / square foot\n- I can buy solar panels for $250 / square foot\n- I negotiated a contract for maintenance that will cost \\\nme a flat $100k per year, and an additional $10 / square \\\nfoot\nWhat is the total cost for the first year of operations \\\nas a function of the number of square feet.\n''' \nStudent's solution:\n'''\nLet x be the size of the installation in square feet.\nCosts:\n1. Land cost: 100x\n2. Solar panel cost: 250x\n3. Maintenance cost: 100,000 + 100x\nTotal cost: 100x + 250x + 100,000 + 100x = 450x + 100,000\n'''\nActual solution:\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'''\nTo calculate the total cost for the first year of operations, we need to add up the costs of land, solar panels, and maintenance.\n\n1. Land cost: $100 / square foot\n   Total land cost = $100 * x (where x is the size of the installation in square feet)\n\n2. Solar panel cost: $250 / square foot\n   Total solar panel cost = $250 * x\n\n3. Maintenance cost: $100,000 (flat fee) + $10 / square foot\n   Total maintenance cost = $100,000 + $10 * x\n\nTotal cost = Land cost + Solar panel cost + Maintenance cost\n           = $100 * x + $250 * x + $100,000 + $10 * x\n           = $360 * x + $100,000\n'''\n\nIs the student's solution the same as actual solution just calculated:\n'''\nYes\n'''\n\nStudent grade:\n'''\nCorrect\n'''\n```\n:::\n:::\n\n\n## Model Limitations: Hallucinations\n\n- Boie is a real company, the product name is not real.\n\n::: {#66ae8834 .cell output-location='slide' execution_count=12}\n``` {.python .cell-code}\nprompt = f\"\"\"\nTell me about AeroGlide UltraSlim Smart Toothbrush by Boie\n\"\"\"\nresponse = get_completion(prompt)\nprint(response)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe AeroGlide UltraSlim Smart Toothbrush by Boie is a technologically advanced toothbrush designed to provide a superior brushing experience. Boie is a company known for its innovative oral care products, and the AeroGlide UltraSlim Smart Toothbrush is no exception.\n\nOne of the standout features of this toothbrush is its ultra-slim design. The brush head is only 2mm thick, making it much thinner than traditional toothbrushes. This slim profile allows for better access to hard-to-reach areas of the mouth, ensuring a thorough and effective clean.\n\nThe AeroGlide UltraSlim Smart Toothbrush also incorporates smart technology. It connects to a mobile app via Bluetooth, allowing users to track their brushing habits and receive personalized recommendations for improving their oral hygiene routine. The app provides real-time feedback on brushing technique, duration, and coverage, helping users to achieve optimal oral health.\n\nThe toothbrush features soft, antimicrobial bristles made from a durable thermoplastic elastomer. These bristles are gentle on the gums and teeth, while also being effective at removing plaque and debris. The antimicrobial properties of the bristles help to inhibit the growth of bacteria, ensuring a hygienic brushing experience.\n\nIn terms of battery life, the AeroGlide UltraSlim Smart Toothbrush boasts an impressive 30-day battery life on a single charge. This makes it convenient for travel and ensures that users don't have to worry about constantly recharging their toothbrush.\n\nOverall, the AeroGlide UltraSlim Smart Toothbrush by Boie offers a combination of advanced technology, slim design, and effective cleaning capabilities. It is a great option for those looking to upgrade their oral care routine and achieve a healthier smile.\n```\n:::\n:::\n\n\n",
    "supporting": [
      "guidelines_files"
    ],
    "filters": [],
    "includes": {}
  }
}